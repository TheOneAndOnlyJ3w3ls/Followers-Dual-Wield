using System;
using System.Collections.Generic;
using System.Linq;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.FormKeys.SkyrimSE;
using System.Threading.Tasks;
using Noggog;
using System.Text.RegularExpressions;

namespace FollowersDualWieldPatcher
{
	public class Program
    {
        public static Lazy<Settings> _settings = null!;
        public static Settings Settings => _settings.Value;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings("Settings", "settings.json", out _settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "SynFollowersDualWield.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            System.Console.WriteLine("Starting patching weapons!");

            /// Iterate on all weapons
            foreach (var weaponGetter in state.LoadOrder.PriorityOrder.WinningOverrides<IWeaponGetter>())
            {
                // Check for null
                if (weaponGetter.Name is null || weaponGetter.Name.String is null || weaponGetter.EditorID is null || weaponGetter.Keywords is null) continue;

                // Ignore non playable items
                if (weaponGetter.MajorFlags.HasFlag(Weapon.MajorFlag.NonPlayable)) continue;

                // All one handed weapons dual wield
                if (Settings.AllWeaponsDualWield && weaponGetter.EquipmentType.Equals(Skyrim.EquipType.RightHand))
                {
                    var item = state.PatchMod.Weapons.GetOrAddAsOverride(weaponGetter);
                    item.EquipmentType!.SetTo(Skyrim.EquipType.EitherHand);
                }
            }

            System.Console.WriteLine("All done!");
        }
    }
}
